# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
SOURCE_DIR = os.path.abspath(os.path.join('.', '..', 'src'))
sys.path.insert(0, SOURCE_DIR)


# -- Project information -----------------------------------------------------

project = u'Sphinx C Autodoc Extension'
copyright = u'2019-2023, Nick'
author = u'Nick'

# The short X.Y version
version = u'1.2'
# The full version, including alpha/beta/rc tags
release = u'1.2.2'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.autosectionlabel',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.imgmath',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx_rtd_theme',
    'sphinxcontrib.autoprogram',
    'sphinx_c_autodoc',
    'sphinx_c_autodoc.napoleon',
    'sphinx_c_autodoc.viewcode',
    # Unfortunatly the typehints fail for the autodoc Documenter class, would
    # really like to work around this, but also want to keep the warning output
    # clean since this is a sphinx extension and would like to know when/if it
    # is producing warnings of its own
    # 'sphinx_autodoc_typehints',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store', 'CHANGELOG.rst']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'CSphinxExtensiondoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'CSphinxExtension.tex', u'C Sphinx Extension Documentation',
     u'Nick G.', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'csphinxextension', u'C Sphinx Extension Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'CSphinxExtension', u'C Sphinx Extension Documentation',
     author, 'CSphinxExtension', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for autosectionlabel

autosectionlabel_prefix_document = True

# -- Options for sphinx_c_autodoc, the extension being documented -----------

c_autodoc_roots = ['../tests/assets/c_source']

set_type_checking_flag = True

# -- Force Scan of API ------------------------------------------------------

# Skip scan when running tests, since sphinx extensions are tested.
# if 'PYTEST_CURRENT_TEST' not in os.environ:
#     # This will force scanning the source directory so that the api can be autopopulated.
#     import sphinx.ext.apidoc as apidoc
#     import shutil
#     args = ['-e', '-o', '_api', '-a', '-f', SOURCE_DIR]

#     try:
#         shutil.rmtree('_api')
#     except:
#         pass

#     apidoc.main(args)

#     # Not fond of this but needed to shut up warning about the main modules file not in TOC.
#     try:
#         contents = [':orphan:\n\n']
#         with open('_api/modules.rst', 'r') as mod_file:
#             contents.extend(mod_file.readlines())
#         with open('_api/modules.rst', 'w') as mod_file:
#             mod_file.writelines(contents)
#     except:
#         pass

# force libclang access for read the docs.
# Read the docs installs doxygen which will install libclang, unfortunatly it
# doesn't appear the so is in the path so need to grab a _backend_ version of
# the file.
if 'READTHEDOCS' in os.environ:
    from clang import cindex
    cindex.Config.set_library_file("/usr/lib/x86_64-linux-gnu/libclang-6.0.so.1")

def setup(app):
   app.add_css_file('css/custom.css')
